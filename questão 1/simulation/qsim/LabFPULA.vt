// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/11/2015 11:30:54"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    test
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module test_vlg_sample_tst(
,
	sampler_tx
);
output sampler_tx;

reg sample;
time current_time;
always @()
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module test_vlg_check_tst (
	oHEX0_D,
	oHEX1_D,
	oHEX2_D,
	oHEX3_D,
	sampler_rx
);
input [6:0] oHEX0_D;
input [6:0] oHEX1_D;
input [6:0] oHEX2_D;
input [6:0] oHEX3_D;
input sampler_rx;

reg [6:0] oHEX0_D_expected;
reg [6:0] oHEX1_D_expected;
reg [6:0] oHEX2_D_expected;
reg [6:0] oHEX3_D_expected;

reg [6:0] oHEX0_D_prev;
reg [6:0] oHEX1_D_prev;
reg [6:0] oHEX2_D_prev;
reg [6:0] oHEX3_D_prev;

reg [6:0] oHEX0_D_expected_prev;
reg [6:0] oHEX1_D_expected_prev;
reg [6:0] oHEX2_D_expected_prev;
reg [6:0] oHEX3_D_expected_prev;

reg [6:0] last_oHEX0_D_exp;
reg [6:0] last_oHEX1_D_exp;
reg [6:0] last_oHEX2_D_exp;
reg [6:0] last_oHEX3_D_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	oHEX0_D_prev = oHEX0_D;
	oHEX1_D_prev = oHEX1_D;
	oHEX2_D_prev = oHEX2_D;
	oHEX3_D_prev = oHEX3_D;
end

// update expected /o prevs

always @(trigger)
begin
	oHEX0_D_expected_prev = oHEX0_D_expected;
	oHEX1_D_expected_prev = oHEX1_D_expected;
	oHEX2_D_expected_prev = oHEX2_D_expected;
	oHEX3_D_expected_prev = oHEX3_D_expected;
end


// expected oHEX0_D[ 6 ]
initial
begin
	oHEX0_D_expected[6] = 1'bX;
end 
// expected oHEX0_D[ 5 ]
initial
begin
	oHEX0_D_expected[5] = 1'bX;
end 
// expected oHEX0_D[ 4 ]
initial
begin
	oHEX0_D_expected[4] = 1'bX;
end 
// expected oHEX0_D[ 3 ]
initial
begin
	oHEX0_D_expected[3] = 1'bX;
end 
// expected oHEX0_D[ 2 ]
initial
begin
	oHEX0_D_expected[2] = 1'bX;
end 
// expected oHEX0_D[ 1 ]
initial
begin
	oHEX0_D_expected[1] = 1'bX;
end 
// expected oHEX0_D[ 0 ]
initial
begin
	oHEX0_D_expected[0] = 1'bX;
end 
// expected oHEX1_D[ 6 ]
initial
begin
	oHEX1_D_expected[6] = 1'bX;
end 
// expected oHEX1_D[ 5 ]
initial
begin
	oHEX1_D_expected[5] = 1'bX;
end 
// expected oHEX1_D[ 4 ]
initial
begin
	oHEX1_D_expected[4] = 1'bX;
end 
// expected oHEX1_D[ 3 ]
initial
begin
	oHEX1_D_expected[3] = 1'bX;
end 
// expected oHEX1_D[ 2 ]
initial
begin
	oHEX1_D_expected[2] = 1'bX;
end 
// expected oHEX1_D[ 1 ]
initial
begin
	oHEX1_D_expected[1] = 1'bX;
end 
// expected oHEX1_D[ 0 ]
initial
begin
	oHEX1_D_expected[0] = 1'bX;
end 
// expected oHEX2_D[ 6 ]
initial
begin
	oHEX2_D_expected[6] = 1'bX;
end 
// expected oHEX2_D[ 5 ]
initial
begin
	oHEX2_D_expected[5] = 1'bX;
end 
// expected oHEX2_D[ 4 ]
initial
begin
	oHEX2_D_expected[4] = 1'bX;
end 
// expected oHEX2_D[ 3 ]
initial
begin
	oHEX2_D_expected[3] = 1'bX;
end 
// expected oHEX2_D[ 2 ]
initial
begin
	oHEX2_D_expected[2] = 1'bX;
end 
// expected oHEX2_D[ 1 ]
initial
begin
	oHEX2_D_expected[1] = 1'bX;
end 
// expected oHEX2_D[ 0 ]
initial
begin
	oHEX2_D_expected[0] = 1'bX;
end 
// expected oHEX3_D[ 6 ]
initial
begin
	oHEX3_D_expected[6] = 1'bX;
end 
// expected oHEX3_D[ 5 ]
initial
begin
	oHEX3_D_expected[5] = 1'bX;
end 
// expected oHEX3_D[ 4 ]
initial
begin
	oHEX3_D_expected[4] = 1'bX;
end 
// expected oHEX3_D[ 3 ]
initial
begin
	oHEX3_D_expected[3] = 1'bX;
end 
// expected oHEX3_D[ 2 ]
initial
begin
	oHEX3_D_expected[2] = 1'bX;
end 
// expected oHEX3_D[ 1 ]
initial
begin
	oHEX3_D_expected[1] = 1'bX;
end 
// expected oHEX3_D[ 0 ]
initial
begin
	oHEX3_D_expected[0] = 1'bX;
end 
// generate trigger
always @(oHEX0_D_expected or oHEX0_D or oHEX1_D_expected or oHEX1_D or oHEX2_D_expected or oHEX2_D or oHEX3_D_expected or oHEX3_D)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected oHEX0_D = %b | expected oHEX1_D = %b | expected oHEX2_D = %b | expected oHEX3_D = %b | ",oHEX0_D_expected_prev,oHEX1_D_expected_prev,oHEX2_D_expected_prev,oHEX3_D_expected_prev);
	$display("| real oHEX0_D = %b | real oHEX1_D = %b | real oHEX2_D = %b | real oHEX3_D = %b | ",oHEX0_D_prev,oHEX1_D_prev,oHEX2_D_prev,oHEX3_D_prev);
`endif
	if (
		( oHEX0_D_expected_prev[0] !== 1'bx ) && ( oHEX0_D_prev[0] !== oHEX0_D_expected_prev[0] )
		&& ((oHEX0_D_expected_prev[0] !== last_oHEX0_D_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oHEX0_D[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oHEX0_D_expected_prev);
		$display ("     Real value = %b", oHEX0_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oHEX0_D_exp[0] = oHEX0_D_expected_prev[0];
	end
	if (
		( oHEX0_D_expected_prev[1] !== 1'bx ) && ( oHEX0_D_prev[1] !== oHEX0_D_expected_prev[1] )
		&& ((oHEX0_D_expected_prev[1] !== last_oHEX0_D_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oHEX0_D[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oHEX0_D_expected_prev);
		$display ("     Real value = %b", oHEX0_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oHEX0_D_exp[1] = oHEX0_D_expected_prev[1];
	end
	if (
		( oHEX0_D_expected_prev[2] !== 1'bx ) && ( oHEX0_D_prev[2] !== oHEX0_D_expected_prev[2] )
		&& ((oHEX0_D_expected_prev[2] !== last_oHEX0_D_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oHEX0_D[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oHEX0_D_expected_prev);
		$display ("     Real value = %b", oHEX0_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oHEX0_D_exp[2] = oHEX0_D_expected_prev[2];
	end
	if (
		( oHEX0_D_expected_prev[3] !== 1'bx ) && ( oHEX0_D_prev[3] !== oHEX0_D_expected_prev[3] )
		&& ((oHEX0_D_expected_prev[3] !== last_oHEX0_D_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oHEX0_D[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oHEX0_D_expected_prev);
		$display ("     Real value = %b", oHEX0_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oHEX0_D_exp[3] = oHEX0_D_expected_prev[3];
	end
	if (
		( oHEX0_D_expected_prev[4] !== 1'bx ) && ( oHEX0_D_prev[4] !== oHEX0_D_expected_prev[4] )
		&& ((oHEX0_D_expected_prev[4] !== last_oHEX0_D_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oHEX0_D[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oHEX0_D_expected_prev);
		$display ("     Real value = %b", oHEX0_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oHEX0_D_exp[4] = oHEX0_D_expected_prev[4];
	end
	if (
		( oHEX0_D_expected_prev[5] !== 1'bx ) && ( oHEX0_D_prev[5] !== oHEX0_D_expected_prev[5] )
		&& ((oHEX0_D_expected_prev[5] !== last_oHEX0_D_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oHEX0_D[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oHEX0_D_expected_prev);
		$display ("     Real value = %b", oHEX0_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oHEX0_D_exp[5] = oHEX0_D_expected_prev[5];
	end
	if (
		( oHEX0_D_expected_prev[6] !== 1'bx ) && ( oHEX0_D_prev[6] !== oHEX0_D_expected_prev[6] )
		&& ((oHEX0_D_expected_prev[6] !== last_oHEX0_D_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oHEX0_D[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oHEX0_D_expected_prev);
		$display ("     Real value = %b", oHEX0_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_oHEX0_D_exp[6] = oHEX0_D_expected_prev[6];
	end
	if (
		( oHEX1_D_expected_prev[0] !== 1'bx ) && ( oHEX1_D_prev[0] !== oHEX1_D_expected_prev[0] )
		&& ((oHEX1_D_expected_prev[0] !== last_oHEX1_D_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oHEX1_D[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oHEX1_D_expected_prev);
		$display ("     Real value = %b", oHEX1_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oHEX1_D_exp[0] = oHEX1_D_expected_prev[0];
	end
	if (
		( oHEX1_D_expected_prev[1] !== 1'bx ) && ( oHEX1_D_prev[1] !== oHEX1_D_expected_prev[1] )
		&& ((oHEX1_D_expected_prev[1] !== last_oHEX1_D_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oHEX1_D[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oHEX1_D_expected_prev);
		$display ("     Real value = %b", oHEX1_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oHEX1_D_exp[1] = oHEX1_D_expected_prev[1];
	end
	if (
		( oHEX1_D_expected_prev[2] !== 1'bx ) && ( oHEX1_D_prev[2] !== oHEX1_D_expected_prev[2] )
		&& ((oHEX1_D_expected_prev[2] !== last_oHEX1_D_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oHEX1_D[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oHEX1_D_expected_prev);
		$display ("     Real value = %b", oHEX1_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oHEX1_D_exp[2] = oHEX1_D_expected_prev[2];
	end
	if (
		( oHEX1_D_expected_prev[3] !== 1'bx ) && ( oHEX1_D_prev[3] !== oHEX1_D_expected_prev[3] )
		&& ((oHEX1_D_expected_prev[3] !== last_oHEX1_D_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oHEX1_D[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oHEX1_D_expected_prev);
		$display ("     Real value = %b", oHEX1_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oHEX1_D_exp[3] = oHEX1_D_expected_prev[3];
	end
	if (
		( oHEX1_D_expected_prev[4] !== 1'bx ) && ( oHEX1_D_prev[4] !== oHEX1_D_expected_prev[4] )
		&& ((oHEX1_D_expected_prev[4] !== last_oHEX1_D_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oHEX1_D[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oHEX1_D_expected_prev);
		$display ("     Real value = %b", oHEX1_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oHEX1_D_exp[4] = oHEX1_D_expected_prev[4];
	end
	if (
		( oHEX1_D_expected_prev[5] !== 1'bx ) && ( oHEX1_D_prev[5] !== oHEX1_D_expected_prev[5] )
		&& ((oHEX1_D_expected_prev[5] !== last_oHEX1_D_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oHEX1_D[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oHEX1_D_expected_prev);
		$display ("     Real value = %b", oHEX1_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oHEX1_D_exp[5] = oHEX1_D_expected_prev[5];
	end
	if (
		( oHEX1_D_expected_prev[6] !== 1'bx ) && ( oHEX1_D_prev[6] !== oHEX1_D_expected_prev[6] )
		&& ((oHEX1_D_expected_prev[6] !== last_oHEX1_D_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oHEX1_D[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oHEX1_D_expected_prev);
		$display ("     Real value = %b", oHEX1_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_oHEX1_D_exp[6] = oHEX1_D_expected_prev[6];
	end
	if (
		( oHEX2_D_expected_prev[0] !== 1'bx ) && ( oHEX2_D_prev[0] !== oHEX2_D_expected_prev[0] )
		&& ((oHEX2_D_expected_prev[0] !== last_oHEX2_D_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oHEX2_D[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oHEX2_D_expected_prev);
		$display ("     Real value = %b", oHEX2_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oHEX2_D_exp[0] = oHEX2_D_expected_prev[0];
	end
	if (
		( oHEX2_D_expected_prev[1] !== 1'bx ) && ( oHEX2_D_prev[1] !== oHEX2_D_expected_prev[1] )
		&& ((oHEX2_D_expected_prev[1] !== last_oHEX2_D_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oHEX2_D[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oHEX2_D_expected_prev);
		$display ("     Real value = %b", oHEX2_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oHEX2_D_exp[1] = oHEX2_D_expected_prev[1];
	end
	if (
		( oHEX2_D_expected_prev[2] !== 1'bx ) && ( oHEX2_D_prev[2] !== oHEX2_D_expected_prev[2] )
		&& ((oHEX2_D_expected_prev[2] !== last_oHEX2_D_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oHEX2_D[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oHEX2_D_expected_prev);
		$display ("     Real value = %b", oHEX2_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oHEX2_D_exp[2] = oHEX2_D_expected_prev[2];
	end
	if (
		( oHEX2_D_expected_prev[3] !== 1'bx ) && ( oHEX2_D_prev[3] !== oHEX2_D_expected_prev[3] )
		&& ((oHEX2_D_expected_prev[3] !== last_oHEX2_D_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oHEX2_D[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oHEX2_D_expected_prev);
		$display ("     Real value = %b", oHEX2_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oHEX2_D_exp[3] = oHEX2_D_expected_prev[3];
	end
	if (
		( oHEX2_D_expected_prev[4] !== 1'bx ) && ( oHEX2_D_prev[4] !== oHEX2_D_expected_prev[4] )
		&& ((oHEX2_D_expected_prev[4] !== last_oHEX2_D_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oHEX2_D[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oHEX2_D_expected_prev);
		$display ("     Real value = %b", oHEX2_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oHEX2_D_exp[4] = oHEX2_D_expected_prev[4];
	end
	if (
		( oHEX2_D_expected_prev[5] !== 1'bx ) && ( oHEX2_D_prev[5] !== oHEX2_D_expected_prev[5] )
		&& ((oHEX2_D_expected_prev[5] !== last_oHEX2_D_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oHEX2_D[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oHEX2_D_expected_prev);
		$display ("     Real value = %b", oHEX2_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oHEX2_D_exp[5] = oHEX2_D_expected_prev[5];
	end
	if (
		( oHEX2_D_expected_prev[6] !== 1'bx ) && ( oHEX2_D_prev[6] !== oHEX2_D_expected_prev[6] )
		&& ((oHEX2_D_expected_prev[6] !== last_oHEX2_D_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oHEX2_D[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oHEX2_D_expected_prev);
		$display ("     Real value = %b", oHEX2_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_oHEX2_D_exp[6] = oHEX2_D_expected_prev[6];
	end
	if (
		( oHEX3_D_expected_prev[0] !== 1'bx ) && ( oHEX3_D_prev[0] !== oHEX3_D_expected_prev[0] )
		&& ((oHEX3_D_expected_prev[0] !== last_oHEX3_D_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oHEX3_D[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oHEX3_D_expected_prev);
		$display ("     Real value = %b", oHEX3_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oHEX3_D_exp[0] = oHEX3_D_expected_prev[0];
	end
	if (
		( oHEX3_D_expected_prev[1] !== 1'bx ) && ( oHEX3_D_prev[1] !== oHEX3_D_expected_prev[1] )
		&& ((oHEX3_D_expected_prev[1] !== last_oHEX3_D_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oHEX3_D[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oHEX3_D_expected_prev);
		$display ("     Real value = %b", oHEX3_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oHEX3_D_exp[1] = oHEX3_D_expected_prev[1];
	end
	if (
		( oHEX3_D_expected_prev[2] !== 1'bx ) && ( oHEX3_D_prev[2] !== oHEX3_D_expected_prev[2] )
		&& ((oHEX3_D_expected_prev[2] !== last_oHEX3_D_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oHEX3_D[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oHEX3_D_expected_prev);
		$display ("     Real value = %b", oHEX3_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oHEX3_D_exp[2] = oHEX3_D_expected_prev[2];
	end
	if (
		( oHEX3_D_expected_prev[3] !== 1'bx ) && ( oHEX3_D_prev[3] !== oHEX3_D_expected_prev[3] )
		&& ((oHEX3_D_expected_prev[3] !== last_oHEX3_D_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oHEX3_D[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oHEX3_D_expected_prev);
		$display ("     Real value = %b", oHEX3_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oHEX3_D_exp[3] = oHEX3_D_expected_prev[3];
	end
	if (
		( oHEX3_D_expected_prev[4] !== 1'bx ) && ( oHEX3_D_prev[4] !== oHEX3_D_expected_prev[4] )
		&& ((oHEX3_D_expected_prev[4] !== last_oHEX3_D_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oHEX3_D[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oHEX3_D_expected_prev);
		$display ("     Real value = %b", oHEX3_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oHEX3_D_exp[4] = oHEX3_D_expected_prev[4];
	end
	if (
		( oHEX3_D_expected_prev[5] !== 1'bx ) && ( oHEX3_D_prev[5] !== oHEX3_D_expected_prev[5] )
		&& ((oHEX3_D_expected_prev[5] !== last_oHEX3_D_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oHEX3_D[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oHEX3_D_expected_prev);
		$display ("     Real value = %b", oHEX3_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oHEX3_D_exp[5] = oHEX3_D_expected_prev[5];
	end
	if (
		( oHEX3_D_expected_prev[6] !== 1'bx ) && ( oHEX3_D_prev[6] !== oHEX3_D_expected_prev[6] )
		&& ((oHEX3_D_expected_prev[6] !== last_oHEX3_D_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port oHEX3_D[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", oHEX3_D_expected_prev);
		$display ("     Real value = %b", oHEX3_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_oHEX3_D_exp[6] = oHEX3_D_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module test_vlg_vec_tst();
// constants                                           
// general purpose registers
// wires                                               
wire [6:0] oHEX0_D;
wire [6:0] oHEX1_D;
wire [6:0] oHEX2_D;
wire [6:0] oHEX3_D;

wire sampler;                             

// assign statements (if any)                          
test i1 (
// port map - connection between master ports and signals/registers   
	.oHEX0_D(oHEX0_D),
	.oHEX1_D(oHEX1_D),
	.oHEX2_D(oHEX2_D),
	.oHEX3_D(oHEX3_D)
);

test_vlg_sample_tst tb_sample (
	,
	.sampler_tx(sampler)
);

test_vlg_check_tst tb_out(
	.oHEX0_D(oHEX0_D),
	.oHEX1_D(oHEX1_D),
	.oHEX2_D(oHEX2_D),
	.oHEX3_D(oHEX3_D),
	.sampler_rx(sampler)
);
endmodule

